{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Informed and Uninformed Search Algorithms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<style>\n",
    ".text_cell_render {\n",
    "font-family: Times New Roman, serif;\n",
    "}\n",
    "</style>\n",
    "#Artificial Intelligence - CA1\n",
    "#Shakiba Bolbolian Khah - 810196426\n",
    "    \n",
    "سلاااام حالتون خوبه؟"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import deque\n",
    "actions = ['U','R','D','L']\n",
    "null = 0\n",
    "cityWidth = 0\n",
    "cityHeight = 0\n",
    "\n",
    "def initiateState(fileName):\n",
    "    city = [line.rstrip('\\n') for line in open(fileName)]\n",
    "    initialState = {}\n",
    "    for j in range(1,len(city)-1):\n",
    "        for i in range(1,len(city[j])-1):\n",
    "            temp = city[j][i]\n",
    "            if(temp.isdigit()):\n",
    "                initialState[(i,j)] = int(temp)\n",
    "            elif(temp == 'A'):\n",
    "                initialState['A'] = (i,j)\n",
    "            elif(temp != ' '):\n",
    "                initialState[(i,j)] = temp\n",
    "    global cityWidth \n",
    "    cityWidth = len(city[0]) -1\n",
    "    global cityHeight \n",
    "    cityHeight = len(city) - 1\n",
    "    return initialState "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def handleUpAction(currentState):\n",
    "    currentLoc = currentState['A']\n",
    "    i = currentLoc[0]\n",
    "    j = currentLoc[1]\n",
    "    if((i,j-1) in currentState):\n",
    "        nextCell = currentState[(i,j-1)]\n",
    "        if(nextCell == '#'): #Above is obstacle\n",
    "            return null\n",
    "        elif(nextCell == 'P'):\n",
    "            if(j>2):\n",
    "                if((i,j-2) in currentState): \n",
    "                    nextTwoCell = currentState[(i,j-2)]\n",
    "                    if(nextTwoCell == '#' or nextTwoCell == 'P'): \n",
    "                        return null #Above is patient. Two cells above is obstacle or patient\n",
    "                    else: #Abpve is patient. Two cells above is hospital\n",
    "                        currentState['A'] = (i,j-1)\n",
    "                        del(currentState[(i,j-1)])\n",
    "                        if(nextTwoCell-1 == 0):\n",
    "                            del(currentState[(i,j-2)])\n",
    "                        else:\n",
    "                            currentState[(i,j-2)] -= 1                                \n",
    "                        return currentState\n",
    "                else: #Above is patient. Two cells up is empty\n",
    "                    currentState['A'] = (i,j-1)\n",
    "                    currentState[(i,j-2)] = 'P'\n",
    "                    del(currentState[(i,j-1)])\n",
    "                    return currentState\n",
    "            else: #Above is patient. Two cells above is obstacle\n",
    "                return null\n",
    "        else: #Above is hospital. There is no patient with us\n",
    "            currentState['A'] = (i,j-1)\n",
    "            return currentState\n",
    "    elif(j>1): #Above is free\n",
    "        currentState['A'] = (i,j-1)\n",
    "        return currentState\n",
    "    else: #Above is wall\n",
    "        return null    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def handleDownAction(currentState):\n",
    "    currentLoc = currentState['A']\n",
    "    i = currentLoc[0]\n",
    "    j = currentLoc[1]\n",
    "    if((i,j+1) in currentState):\n",
    "        nextCell = currentState[(i,j+1)]\n",
    "        if(nextCell == '#'): #Below is obstacle\n",
    "            return null\n",
    "        elif(nextCell == 'P'):\n",
    "            if(j < cityHeight -2):\n",
    "                if((i,j+2) in currentState): \n",
    "                    nextTwoCell = currentState[(i,j+2)]\n",
    "                    if(nextTwoCell == '#' or nextTwoCell == 'P'): \n",
    "                        return null #Below is patient. Two cells below is obstacle or patient\n",
    "                    else: #Below is patient. Two cells below is hospital\n",
    "                        currentState['A'] = (i,j+1)\n",
    "                        del(currentState[(i,j+1)])\n",
    "                        if(nextTwoCell-1 == 0):\n",
    "                            del(currentState[(i,j+2)])\n",
    "                        else:\n",
    "                            currentState[(i,j+2)] -= 1                                \n",
    "                        return currentState\n",
    "                else: #below is patient. Two cells below is empty\n",
    "                    currentState['A'] = (i,j+1)\n",
    "                    currentState[(i,j+2)] = 'P'\n",
    "                    del(currentState[(i,j+1)])\n",
    "                    return currentState\n",
    "            else: #below is patient. Two cells below is obstacle\n",
    "                return null\n",
    "        else: #below is hospital. There is no patient with us\n",
    "            currentState['A'] = (i,j+1)\n",
    "            return currentState\n",
    "    elif(j < cityHeight -1): #below is free\n",
    "        currentState['A'] = (i,j+1)\n",
    "        return currentState\n",
    "    else: #below is wall\n",
    "        return null "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def handleLeftAction(currentState):\n",
    "    currentLoc = currentState['A']\n",
    "    i = currentLoc[0]\n",
    "    j = currentLoc[1]\n",
    "    if((i-1,j) in currentState):\n",
    "        nextCell = currentState[(i-1,j)]\n",
    "        if(nextCell == '#'): #Left is obstacle\n",
    "            return null\n",
    "        elif(nextCell == 'P'):\n",
    "            if(i > 2):\n",
    "                if((i-2,j) in currentState): \n",
    "                    nextTwoCell = currentState[(i-2,j)]\n",
    "                    if(nextTwoCell == '#' or nextTwoCell == 'P'): \n",
    "                        return null #Left is patient. Two cells left is obstacle or patient\n",
    "                    else: #Left is patient. Two cells left is hospital\n",
    "                        currentState['A'] = (i-1,j)\n",
    "                        del(currentState[(i-1,j)])\n",
    "                        if(nextTwoCell-1 == 0):\n",
    "                            del(currentState[(i-2,j)])\n",
    "                        else:\n",
    "                            currentState[(i-2,j)] -= 1                                \n",
    "                        return currentState\n",
    "                else: #Left is patient. Two cells left is empty\n",
    "                    currentState['A'] = (i-1,j)\n",
    "                    currentState[(i-2,j)] = 'P'\n",
    "                    del(currentState[(i-1,j)])\n",
    "                    return currentState\n",
    "            else: #Left is patient. Two cells left is obstacle\n",
    "                return null\n",
    "        else: #Left is hospital. There is no patient with us\n",
    "            currentState['A'] = (i-1,j)\n",
    "            return currentState\n",
    "    elif(i>1): #Left is free\n",
    "        currentState['A'] = (i-1,j)\n",
    "        return currentState\n",
    "    else: #Left is wall\n",
    "        return null "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def handleRightAction(currentState):\n",
    "    currentLoc = currentState['A']\n",
    "    i = currentLoc[0]\n",
    "    j = currentLoc[1]\n",
    "    if((i+1,j) in currentState):\n",
    "        nextCell = currentState[(i+1,j)]\n",
    "        if(nextCell == '#'): #Right is obstacle\n",
    "            return null\n",
    "        elif(nextCell == 'P'):\n",
    "            if(i < cityWidth - 2):\n",
    "                if((i+2,j) in currentState): \n",
    "                    nextTwoCell = currentState[(i+2,j)]\n",
    "                    if(nextTwoCell == '#' or nextTwoCell == 'P'): \n",
    "                        return null #Right is patient. Two cells Right is obstacle or patient\n",
    "                    else: #Right is patient. Two cells Right is hospital\n",
    "                        currentState['A'] = (i+1,j)\n",
    "                        del(currentState[(i+1,j)])\n",
    "                        if(nextTwoCell-1 == 0):\n",
    "                            del(currentState[(i+2,j)])\n",
    "                        else:\n",
    "                            currentState[(i+2,j)] -= 1                                \n",
    "                        return currentState\n",
    "                else: #Right is patient. Two cells right is empty\n",
    "                    currentState['A'] = (i+1,j)\n",
    "                    currentState[(i+2,j)] = 'P'\n",
    "                    del(currentState[(i+1,j)])\n",
    "                    return currentState\n",
    "            else: #Right is patient. Two cells right is obstacle\n",
    "                return null\n",
    "        else: #Right is hospital. There is no patient with us\n",
    "            currentState['A'] = (i+1,j)\n",
    "            return currentState\n",
    "    elif(i < cityWidth - 1): #Right is free\n",
    "        currentState['A'] = (i+1,j)\n",
    "        return currentState\n",
    "    else: #Right is wall\n",
    "        return null "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def updateState(currentState, direction):\n",
    "    if(direction == 'U'):\n",
    "        return handleUpAction(currentState)\n",
    "    elif(direction == 'R'):\n",
    "        return handleRightAction(currentState)\n",
    "    elif(direction == 'D'):\n",
    "        return handleDownAction(currentState)\n",
    "    else:\n",
    "        return handleLeftAction(currentState)    \n",
    "    \n",
    "def printState(s):\n",
    "    for j in range(cityHeight+1):\n",
    "        for i in range(cityWidth+1):\n",
    "            if (i,j) in s:\n",
    "                print(s[(i,j)], end=\"\")\n",
    "            elif s['A'] == (i,j):\n",
    "                print('A', end =\"\")\n",
    "            else:\n",
    "                print(' ', end=\"\")\n",
    "        print('\\n')\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def BFS(start):\n",
    "    initialState = initiateState(start)\n",
    "    explored = set()\n",
    "    frontier = []\n",
    "    seenStates = 1\n",
    "    distinctSeenStates = 1\n",
    "    frontier.append((initialState,0))\n",
    "    if(not('P' in initialState.values())):\n",
    "        return {'seen state': seenStates, 'distinct seen states': distinctSeenStates, 'search depth': level}\n",
    "    while(frontier):\n",
    "        node, level = frontier.pop(0)\n",
    "        if(hash(frozenset(node.items())) in explored):\n",
    "            continue\n",
    "        explored.add(hash(frozenset(node.items())))\n",
    "        distinctSeenStates += 1\n",
    "        for action in actions:\n",
    "            seenStates += 1\n",
    "            child = updateState(node.copy(),action)\n",
    "            if(child != null):\n",
    "                if(not('P' in node.values())):\n",
    "                    return {'seen state': seenStates, 'distinct seen states': distinctSeenStates, 'search depth': level}\n",
    "                frontier.append((child,level+1))\n",
    "    return null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def DFS(currentState, limit):\n",
    "    seenStates = 0\n",
    "    distinctSeenStates = 0\n",
    "    explored = {}\n",
    "    frontier = [(currentState,0)]\n",
    "    while(frontier):\n",
    "        node, level = frontier.pop()\n",
    "        if( hash(frozenset(node.items())) in explored and explored[hash(frozenset(node.items()))]<= level):\n",
    "            continue\n",
    "        explored[hash(frozenset(node.items()))] = level\n",
    "        distinctSeenStates += 1\n",
    "        for action in actions:\n",
    "            seenStates += 1\n",
    "            child = updateState(node.copy(),action)\n",
    "            if(child != null):\n",
    "                if(not('P' in child.values())):\n",
    "                    return {'seen state': seenStates, 'distinct seen states': distinctSeenStates, 'search depth': level+1}\n",
    "                if(limit-level > 1):\n",
    "                    frontier.append((child,level+1))\n",
    "    return null\n",
    "  \n",
    "def IDS(maxDepth, start):\n",
    "    initialState = initiateState(start)\n",
    "    for limit in range(maxDepth):\n",
    "        result = DFS(initialState.copy(), limit)\n",
    "        if(result != null):\n",
    "            return(result)\n",
    "    return null "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import math\n",
    "def firstHuristic(currentState):\n",
    "    patients = [k for k,v in currentState.items() if v == 'P']\n",
    "    hospitals = [k for k,v in currentState.items() if isinstance(v,int)]\n",
    "    location = currentState['A']\n",
    "    minDis = float('inf')\n",
    "    for p in patients:\n",
    "        toPatient = math.sqrt(pow(location[0]-p[0],2)+pow(location[1]-p[1],2))\n",
    "        for h in hospitals:\n",
    "            toHospital = toPatient + math.sqrt(pow(p[0]-h[0],2)+pow(p[1]-h[1],2))\n",
    "            if(toHospital < minDis):\n",
    "                minDis = toHospital\n",
    "    return minDis\n",
    "\n",
    "def secondHuristic(currentState):\n",
    "    patients = [k for k,v in currentState.items() if v == 'P']\n",
    "    hospitals = [k for k,v in currentState.items() if isinstance(v,int)]\n",
    "    location = currentState['A']\n",
    "    totalDis = 0\n",
    "    minDisToP = float('inf')\n",
    "    for p in patients:\n",
    "        toPatient = math.sqrt(pow(location[0]-p[0],2)+pow(location[1]-p[1],2))\n",
    "        if(toPatient < minDisToP):\n",
    "            minDisToP = toPatient\n",
    "        minDis = float('inf')\n",
    "        for h in hospitals:\n",
    "            toHospital = math.sqrt(pow(p[0]-h[0],2)+pow(p[1]-h[1],2))\n",
    "            if(toHospital < minDis):\n",
    "                minDis = toHospital\n",
    "        totalDis += minDis\n",
    "    totalDis += minDisToP\n",
    "    return totalDis\n",
    "    \n",
    "    return\n",
    "\n",
    "\n",
    "def AStar(start, huristicNum):\n",
    "    seenStates = 0\n",
    "    distinctSeenStates = 0\n",
    "    initialState = initiateState(start)\n",
    "    if(not('P' in initialState.values())):\n",
    "        printState(initialState)\n",
    "        return \"done\"\n",
    "    \n",
    "    frontier = {}\n",
    "    states = {}\n",
    "    explored = set()\n",
    "    actualCost = {}\n",
    "    \n",
    "    hashNode = hash(frozenset(initialState.items()))\n",
    "    actualCost[hashNode] = 0\n",
    "    frontier[hashNode] = secondHuristic(initialState)\n",
    "    states[hashNode] = (initialState,0)\n",
    "    \n",
    "    while(frontier):\n",
    "        distinctSeenStates+=1\n",
    "        hashNode = min(frontier.keys(), key=(lambda k: frontier[k]))\n",
    "        node, level = states[hashNode]\n",
    "        nodeCost = actualCost[hashNode]\n",
    "        explored.add(hashNode)\n",
    "        del frontier[hashNode]\n",
    "        for action in actions:\n",
    "            child = updateState(node.copy(),action)\n",
    "            if child!= null:\n",
    "                seenStates += 1\n",
    "                if(not('P' in child.values())):\n",
    "                    return {'seen state': seenStates, 'distinct seen states': distinctSeenStates, 'search depth': level+1}\n",
    "                childCost = nodeCost + 1\n",
    "                hashChild = hash(frozenset(child.items()))\n",
    "                if(hashChild not in frontier and hashChild not in explored):\n",
    "                    frontier[hashChild] = childCost + secondHuristic(child)\n",
    "                actualCost[hashChild] = childCost\n",
    "                states[hashChild] = (child, level+1)\n",
    "    return null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'distinct seen states': 416, 'seen state': 1658, 'search depth': 11}\n",
      "CPU times: user 9.15 ms, sys: 110 µs, total: 9.26 ms\n",
      "Wall time: 8.67 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "print(BFS('test1.txt'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'distinct seen states': 306, 'seen state': 1223, 'search depth': 11}\n",
      "CPU times: user 19.3 ms, sys: 0 ns, total: 19.3 ms\n",
      "Wall time: 19.4 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "print(IDS(40,'test1.txt'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'distinct seen states': 114, 'seen state': 330, 'search depth': 11}\n",
      "CPU times: user 7 ms, sys: 299 µs, total: 7.3 ms\n",
      "Wall time: 7.03 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "print(AStar('test1.txt', 1))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
